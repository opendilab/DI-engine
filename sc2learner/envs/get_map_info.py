"""
Script to extract map_size from maps
Usage: Run me on a computer with pysc2 environment and ladder map packs installed
       Output will be writen to map_info.py
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

from absl import app
from s2clientprotocol import sc2api_pb2 as sc_pb

from pysc2 import maps
from pysc2 import run_configs

header = '# flake8: noqa\n\
\"\"\"\n\
Generated by map_size_gen.py, containing information for each map in MAPS dict\n\
key: map_name (formatted, without spaces and LE)\n\
value: (battle_net, map_path, map_size (x,y))\n\
\"\"\"\n\n\n\
MAPS = {\n'

trailer = '}'


def main(unused_argv):
    with open('map_info.py', 'w') as of:
        run_config = run_configs.get()
        interface = sc_pb.InterfaceOptions(raw=True, score=False, raw_crop_to_playable_area=True)
        of.write(header)
        formated_name_list = []
        with run_config.start(want_rgb=False) as controller:
            mps = maps.get_maps()
            print(mps)
            for fnm, mp in mps.items():
                print('Creating game')
                try:
                    mp_i = mp()
                    create = sc_pb.RequestCreateGame(realtime=True)
                    create.player_setup.add(type=sc_pb.Participant)
                    create.player_setup.add(type=sc_pb.Computer)
                    print(mp_i.path)
                    create.local_map.map_path = mp_i.path
                    join = sc_pb.RequestJoinGame(options=interface, race=2, player_name="SenseStar")
                    controller.create_game(create)
                    controller.join_game(join)
                except Exception:
                    print('Starting game failed, check file existence')
                    continue
                if fnm in formated_name_list:
                    print('Duplicate, skipping')
                    continue
                else:
                    formated_name_list.append(fnm)
                map_size = controller.game_info().start_raw.map_size
                print(
                    '{}: ({}, {}, {}),\n'.format(
                        repr(fnm), repr(mp_i.battle_net), repr(mp_i.path), [map_size.x, map_size.y]
                    )
                )
                of.write(
                    '    {}: ({}, {}, {}),\n'.format(
                        repr(fnm), repr(mp_i.battle_net), repr(mp_i.path), [map_size.x, map_size.y]
                    )
                )
                of.flush()
        of.write(trailer)


if __name__ == '__main__':
    app.run(main)
