name: deploy  # deploy docker

on:
  push:
    branches: [main, '*deploy*', '*docker*']

jobs:
  docker_base:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      matrix:
        platform: [linux/amd64]
        # python-version: [3.6, 3.7, 3.8]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Prepare
        id: prep
        env:
          DOCKERIO_ORG: opendilab
          TARGET: ding
          DATE: ${{ steps.date.outputs.date }}
        run: |
          DOCKER_IMAGE=$DOCKERIO_ORG/$TARGET
          VERSION=$DATE
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          NIGHTLY_TAGS="${DOCKER_IMAGE}:nightly"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=nightlytags::${NIGHTLY_TAGS}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./docker/Dockerfile.base
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.prep.outputs.tags }}
            ${{ steps.prep.outputs.nightlytags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: base

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  docker_doc:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      matrix:
        platform: [linux/amd64]
        # python-version: [3.6, 3.7, 3.8]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Prepare
        id: prep
        env:
          DOCKERIO_ORG: opendilab
          TARGET: ding
          DATE: ${{ steps.date.outputs.date }}
        run: |
          DOCKER_IMAGE=$DOCKERIO_ORG/$TARGET
          VERSION=nightly-doc
          DOC_TAGS="${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=doctags::${DOC_TAGS}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./docker/Dockerfile.base
          target: doc
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.doctags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  docker_atari:
    runs-on: ubuntu-latest
    needs: docker_base
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      matrix:
        platform: [linux/amd64]
        # python-version: [3.6, 3.7, 3.8]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare
        id: prep
        env:
          DOCKERIO_ORG: opendilab
          TARGET: ding
        run: |
          DOCKER_IMAGE=$DOCKERIO_ORG/$TARGET
          VERSION=nightly-atari
          ATARI_TAGS="${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=ataritags::${ATARI_TAGS}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./docker/Dockerfile.env
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.ataritags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: atari

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  docker_mujoco:
    runs-on: ubuntu-latest
    needs: docker_base
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      matrix:
        platform: [linux/amd64]
        # python-version: [3.6, 3.7, 3.8]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare
        id: prep
        env:
          DOCKERIO_ORG: opendilab
          TARGET: ding
        run: |
          DOCKER_IMAGE=$DOCKERIO_ORG/$TARGET
          VERSION=nightly-mujoco
          MUJOCO_TAGS="${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=mujocotags::${MUJOCO_TAGS}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./docker/Dockerfile.env
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.mujocotags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: mujoco

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  docker_metaworld:
    runs-on: ubuntu-latest
    needs: docker_base
    if: "contains(github.event.head_commit.message, 'metaworld docker')"
    strategy:
      matrix:
        platform: [linux/amd64]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare
        id: prep
        env:
          DOCKERIO_ORG: opendilab
          TARGET: ding
        run: |
          DOCKER_IMAGE=$DOCKERIO_ORG/$TARGET
          VERSION=nightly-metaworld
          METAWORLD_TAGS="${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=metaworldtags::${METAWORLD_TAGS}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./docker/Dockerfile.env
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.metaworldtags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          target: metaworld

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  docker_smac:
    runs-on: [self-hosted, smac]
    needs: docker_base
    if: "contains(github.event.head_commit.message, 'smac docker')"
    # if: |
    #  contains(github.event.head_commit.message, 'enable docker') &&
    #  contains(github.event.head_commit.message, 'smac docker')
    strategy:
      matrix:
        platform: [linux/amd64]
        # python-version: [3.6, 3.7, 3.8]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Build and push
        id: docker_build
        run:  |
          docker buildx build -f ./docker/Dockerfile.env . -t opendilab/ding:nightly-smac --target=smac
          docker push opendilab/ding:nightly-smac

  docker_grf:
    runs-on: ubuntu-latest
    needs: docker_base
    if: "contains(github.event.head_commit.message, 'grf docker')"
    strategy:
      matrix:
        platform: [linux/amd64]
        # python-version: [3.6, 3.7, 3.8]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Build and push
        id: docker_build
        run:  |
          docker buildx build -f ./docker/Dockerfile.env . -t opendilab/ding:nightly-grf --target=grf
          docker push opendilab/ding:nightly-grf

  docker_dmc2gym:
    runs-on: ubuntu-latest
    needs: docker_base
    # if: "contains(github.event.head_commit.message, 'dmc2gym docker')"
    strategy:
      matrix:
        platform: [linux/amd64]
        # python-version: [3.6, 3.7, 3.8]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Build and push
        id: docker_build
        run:  |
          docker buildx build -f ./docker/Dockerfile.env . -t opendilab/ding:nightly-dmc2gym --target=dmc2gym
          docker push opendilab/ding:nightly-dmc2gym

  docker_evogym:
    runs-on: ubuntu-latest
    needs: docker_base
    if: "contains(github.event.head_commit.message, 'evogym docker')"
    strategy:
      matrix:
        platform: [linux/amd64]
        # python-version: [3.6, 3.7, 3.8]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Build and push
        id: docker_build
        run:  |
          docker buildx build -f ./docker/Dockerfile.env . -t opendilab/ding:nightly-evogym --target=evogym
          docker push opendilab/ding:nightly-evogym

  docker_d4rl:
    runs-on: ubuntu-latest
    needs: docker_mujoco
    if: "contains(github.event.head_commit.message, 'd4rl docker')"
    strategy:
      matrix:
        platform: [linux/amd64]
        # python-version: [3.6, 3.7, 3.8]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}

      - name: Build and push
        id: docker_build
        run:  |
          docker buildx build -f ./docker/Dockerfile.env . -t opendilab/ding:nightly-d4rl --target=d4rl
          docker push opendilab/ding:nightly-d4rl
